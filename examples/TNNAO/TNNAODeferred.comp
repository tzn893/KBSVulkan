#pragma kbs_shader
#pragma kbs_compute_begin

#version 450
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_debug_printf : require

#define PI 3.1415926536

#include "shader_common.glsli"
#include "BSDFs/UE4BSDF.glsl"
#include "Deferred/gbuffer.glsl"

struct Light
{
    mat4    lightVP;
    vec3    emission;
    int     lightType;
    vec3    position;
    int     mainLightFlag;
    float   shadowBias;
};

layout(set = 0, binding = 3) buffer LightBuffer
{
    Light lights[];
};


layout(set = 0,binding = 0) uniform Uniform 
{ 
    mat4 invProjection;
    mat4 projection;
    mat4 invView;
    mat4 view;
    vec3 cameraPosition;
    int  lightCount;

    int screenWidth;
    int screenHeight;
    float radius;
} uni;

layout(set = 0, binding = 1, rgba8) uniform image2D colorImage;
layout(set = 0, binding = 2) uniform sampler2D shadowMap;
layout (local_size_x = 16,local_size_y = 16, local_size_z = 1) in;
layout(set = 0, binding = 4) uniform sampler2D aoImage;


void main()
{
    ivec2 pixelIdx = ivec2(gl_GlobalInvocationID.xy);
    if(pixelIdx.x >= uni.screenWidth || pixelIdx.y >= uni.screenHeight)
    {
        return;
    }
    
    vec2 pixelCenter = vec2(pixelIdx) + vec2(0.5);
    vec2 inUV        = pixelCenter /  vec2(uni.screenWidth, uni.screenHeight);

    GBufferData gbuffer = unpackGBuffer(inUV, uni.invProjection, uni.invView);

    vec3 ao = texture(aoImage, inUV).rgb;

    vec3 L = vec3(0.0);
    vec3 V = normalize(uni.cameraPosition - gbuffer.positionWS);

    for(int i = 0;i < uni.lightCount;i++)
    {
        float shadowFactor = 1.0;

        if(lights[i].mainLightFlag != 0)
        {
            vec3 positionLS = (lights[i].lightVP * vec4(gbuffer.positionWS, 1.0) ).xyz;
            positionLS.xy = positionLS.xy * 0.5 + 0.5;
            float mapDepthLS = texture(shadowMap, positionLS.xy).r;
            shadowFactor = step(positionLS.z - lights[i].shadowBias, mapDepthLS);    
        }

        vec3 Ld = vec3(0, 0, 0);
        vec3 emissive = vec3(0, 0, 0);
        if(lights[i].lightType == 2 )
        {
            Ld = normalize(lights[i].position);
            emissive = lights[i].emission;
        }

        L += UE4Eval(gbuffer.albedo, gbuffer.metallic, gbuffer.roughness, Ld, gbuffer.normalWS, V) * emissive * shadowFactor;

        if(lights[i].lightType == 3)
        {
            vec3 ambient = (1 - gbuffer.metallic) * gbuffer.albedo * lights[i].emission * ao;
            L += ambient;
        }
    }

    imageStore(colorImage, pixelIdx, vec4(L, 1.0));
}   

#pragma kbs_compute_end