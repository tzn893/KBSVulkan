/*
 * Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2019-2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */


#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable

#include "ddgi.glsl"

#include "../Probe/Probe.glsl"

// clang-format off
layout(location = 0) rayPayloadEXT DDGIRayPayload payload;

layout(set = 0, binding = 0) uniform accelerationStructureEXT TLAS;


vec3 tracePath(Ray ray, uint rayFlags)
{
	float tMin     = MINIMUM;
	float tMax     = INFINITY;

	
	vec3 beta = vec3(1);
	vec3 absorption = vec3(0.0);
	vec3 pathRadiance = vec3(0);
	BsdfSample bsdf;

	int counter = 0;

	for (uint j = 0; j < ubo.maxDepth; ++j)
	{
		

		payload.depth = j;
		payload.stop = false;
		payload.radiance = pathRadiance;
		payload.beta = beta;
		payload.ray = ray;
		payload.bsdf = bsdf;
		payload.absorption = absorption;

		// debugPrintfEXT(" %d, origin (%f,%f,%f), tMin %f,direction (%f,%f,%f), tMax %f ", rayFlags, ray.origin.x, ray.origin.y, ray.origin.z, tMin, 
		//	ray.direction.x, ray.direction.y, ray.direction.z, tMax);
		// debugPrintfEXT("any gen");

		traceRayEXT(
				TLAS,           // acceleration structure
				rayFlags,       // rayFlags
				0xFF,           // cullMask
				0,              // sbtRecordOffset
				0,              // sbtRecordStride
				0,              // missIndex
				ray.origin,//vec3(0, -1, 0),//,     // ray origin
				tMin,           // ray min range
				ray.direction,  // ray direction
				tMax,           // ray max range
				0               // payload (location = 0)
		);

		pathRadiance = payload.radiance;
		beta = payload.beta;		
		ray = payload.ray;
		bsdf = payload.bsdf;
		absorption = payload.absorption;
		

		if (payload.stop) break;
	}

	return pathRadiance;
}


void main()
{
  int idx = int(gl_LaunchIDEXT.x);
  if(idx >= surfelIdxBuffer.liveSurfelCount)
  {
    return;
  }

  seed = tea(gl_LaunchIDEXT.y * gl_LaunchIDEXT.x + gl_LaunchIDEXT.x, ubo.frame);
  
  int surfelIdx = surfelIdxBuffer.liveSurfelIdx[idx];

  vec3 origin = surfels.surfels[surfelIdx].position;
  vec3 normal = surfels.surfels[surfelIdx].normal;
  float weight = surfels.surfels[surfelIdx].radianceWeight.w;
  
  if(weight > 65536.0) return;

  vec4 dirW = sampleConsineDistribution(vec2(float(idx) / 65536.0, 0.0), normal, seed);
  vec3 direction = dirW.xyz;

  float tMin     = 0.001;
  float tMax     = 10000.0;

  Ray r;
  r.origin = origin;
  r.direction = dirW.xyz;
  vec3 radiance = tracePath(r, gl_RayFlagsOpaqueEXT);

  radiance *= dot(dirW.xyz, normal) / dirW.w;


  surfels.surfels[surfelIdx].radianceWeight += vec4(payload.radiance, 1.0);
}