#pragma kbs_shader
#pragma kbs_compute_begin

#version 450
#include "surfelCommon.glsl"
#include "random.glsl"

#extension GL_EXT_debug_printf : enable

layout(set = 0, binding = 0) buffer _SurfelAccelerationStructure
{
    SurfelAccelerationStructure accelStruct;
};

layout(set = 0, binding = 1) buffer _SurfelBuffer
{
    SurfelBuffer surfels;
};

layout(set = 0, binding = 2, rgba8) uniform  writeonly image2D backBuffer;
layout(set = 0, binding = 3) uniform sampler2D gDepth;
layout(set = 0, binding = 4) uniform sampler2D gNormal;


layout(set = 1, binding = 0) uniform _SurfelGlobalUniform
{
    SurfelGlobalUniform globalUniform;
}; 


layout (local_size_x = 16,local_size_y = 16, local_size_z = 1) in;

void main()
{
    ivec2 pixelIdx = ivec2(gl_GlobalInvocationID.xy);
    vec2 pixelCenter = vec2(pixelIdx) + vec2(0.5);
    vec2 inUV        = pixelCenter * globalUniform.resolution.zw;

    float depth = texture(gDepth, inUV).r;
    vec3  ndc = vec3(inUV * 2.0 - 1.0, depth);
    vec4  clip = vec4(ndc, 1.0);

    vec3  normal = normalize(texture(gNormal, inUV).xyz * 2.0 - 1.0);

    vec4 view = globalUniform.projInverse * clip;
    vec4 position = globalUniform.viewInverse * view;
    position /= position.w;

    int cellIdx = GetGridCellIdx(globalUniform, position.xyz);
    ivec2 cellIndexStartCount = accelStruct.cellIndexStartCount[cellIdx];

    vec4 color = vec4(0.0,0.0,0.0,1.0);
    float  totalSurfelCoverage = 0.0;

    for(int i = 0;i < cellIndexStartCount.y; i++)
    {
        int surfelIdx = accelStruct.asIndexPool[i + cellIndexStartCount.x];
        SurfelInfo surfel = surfels.surfels[surfelIdx];

        float coverage = coverRatio(surfel, position.xyz, normal);
        if(surfel.radius < distance(position.xyz, surfel.position))
        {
            color.xyz += surfel.radianceWeight.xyz / surfel.radianceWeight.w * coverage;//(surfel.normal * 0.5 + 0.5) * coverage;//rand_i1_3(surfelIdx, 0);
            totalSurfelCoverage += coverage;
        }
    }
    
    imageStore(backBuffer, pixelIdx, color / totalSurfelCoverage);
}

#pragma kbs_compute_end