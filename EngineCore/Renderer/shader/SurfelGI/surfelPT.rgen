/*
 * Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2019-2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */


#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable

#include "surfelPT.glsl"
#include "surfelCommon.glsl"

// clang-format off
layout(location = 0) rayPayloadEXT hitPayload prd_o;

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;

layout(set = 0, binding = 4) uniform _GlobalUniform
{
  GlobalUniform globalUniform;
};


layout(set = 2, binding = 0) buffer _SurfelBuffer
{
    SurfelBuffer surfels;
};

layout(set = 2, binding = 1) buffer _SurfelIndexBuffer
{
    SurfelIndexBuffer surfelIdxBuffer;
};

void main()
{
  int idx = int(gl_LaunchIDEXT.x);
  if(idx >= surfelIdxBuffer.liveSurfelCount)
  {
    return;
  }
  
  int surfelIdx = surfelIdxBuffer.liveSurfelIdx[idx];

  vec3 origin = surfels.surfels[surfelIdx].position;
  vec3 normal = surfels.surfels[surfelIdx].normal;
  float weight = surfels.surfels[surfelIdx].radianceWeight.w;
  
  if(weight > 65536.0) return;

  vec4 dirW = sampleConsineDistribution(vec2(float(idx) / 65536.0, 0.0), normal, float(globalUniform.currentFrame));
  vec3 direction = dirW.xyz;

  uint  rayFlags = gl_RayFlagsOpaqueEXT;
  float tMin     = 0.001;
  float tMax     = 10000.0;

  prd_o.attenuation = dot(dirW.xyz, normal) / dirW.w * vec3(1.0);
  
  traceRayEXT(topLevelAS,     // acceleration structure
              rayFlags,       // rayFlags
              0xFF,           // cullMask
              0,              // sbtRecordOffset
              0,              // sbtRecordStride
              0,              // missIndex
              origin.xyz,     // ray origin
              tMin,           // ray min range
              direction.xyz,  // ray direction
              tMax,           // ray max range
              0               // payload (location = 0)
  );

  // if(surfelIdx == 65533)
  // {
  //   debugPrintfEXT("position %f,%f,%f",origin.x, origin.y, origin.z);
  //   debugPrintfEXT("direction %f,%f,%f", direction.x, direction.y, direction.z);
  // }
  
  surfels.surfels[surfelIdx].radianceWeight += vec4(prd_o.radiance, 1.0);
  //imageStore(o_image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.color , 1.0));
}